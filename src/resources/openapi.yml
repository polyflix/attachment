openapi: "3.0.2"
info:
  title: Attachments OpenAPI
  version: "2.0.0"
  description: Description of the HTTP endpoints of the Polyflix attachments service
servers:
  - url: "http://{server}/v{version}"
    description: Local
    variables:
      server:
        default: localhost:5000
      version:
        default: "2.0.0"
  - url: "https://{server}/v{version}"
    description: QA
    variables:
      server:
        default: qapolyflix.dopolytech.fr/api
      version:
        default: "2.0.0"
tags:
  - name: Attachments
components:
  schemas:
    attachment:
      type: object
      allOf:
        - $ref: "#/components/schemas/attachmentBase"
        - properties:
            id:
              type: string
            userId:
              type: string
              description: The id of the user who created this attachment.
            url:
              type: string
              description: The public URL of the attachment. It should be a classical URL if the attachment is a external link, or a PSU if the attachment is a file.
            status:
              type: string
              description: If the attachment is a file, it describes the status of the upload of the file.
              enum:
                - IN_PROGRESS
                - COMPLETED
            videos:
              type: array
              description: An array of linked videos ids.
              items:
                type: string
            modules:
              type: array
              description: An array of linked modules ids.
              items:
                type: string
      required:
        - id
        - userId
        - url
        - status
        - type
        - videos
        - modules
    attachmentBase:
      type: object
      properties:
        type:
          type: string
          description: The type of the attachment, either a file to be uploaded or an external link.
          enum:
            - INTERNAL
            - EXTERNAL
        extension:
          type: string
          description: The file type / extension of the attachment, if it is a file to be uploaded.
        title:
          type: string
          description: The name of the attachment, should be explicit to all users.
        description:
          type: string
          description: The description of the attachment, if it needs to be clarified.
    paginatedAttachments:
      type: object
      properties:
        data:
          type: array
          description: An array of attachments
          items:
            $ref: "#/components/schemas/attachment"
        totalCount:
          type: integer
          description: The total number of attachments, ignoring pagination parameters
  requestBodies:
    createAttachment:
      description: The DTO of a new attachment.
      content:
        application/json:
          schema:
            oneOf:
              - allOf:
                  - $ref: "#/components/schemas/attachmentBase"
                  - type: object
                    properties:
                      url:
                        type: string
                        description: The public URL of the attachment (if it is an external URL)
              - type: object
  responses:
    createdAttachment:
      description: Either the attachment entity if the type is an external link, or a MinIO PSU
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/attachment"
              - type: object
                properties:
                  url:
                    type: string
                    description: The MinIO PSU to upload the file
    attachmentResponse:
      description: An attachment
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/attachment"
    attachmentsResponse:
      description: Returns a list of paginated attachments (for administration purposes).
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/paginatedAttachments"
    notFoundError:
      description: Either the attachment was not found, or the attachment status is still `IN_PROGRESS`.
  parameters:
    limit:
      name: limit
      in: query
      description: The maximum number of attachments to return
      required: false
      schema:
        type: number
    offset:
      name: offset
      in: query
      description: The number of attachments to skip
      required: false
      schema:
        type: number
    id:
      name: id
      in: path
      description: The id of the attachment
      required: true
      schema:
        type: string
paths:
  /attachments/:
    get:
      tags:
        - Attachments
      summary: Get a list of paginated attachments
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses:
        "200":
          $ref: "#/components/responses/attachmentsResponse"
    post:
      tags:
        - Attachments
      summary: Creates an attachment
      description: >
        Creates an attachment. If the type of the attachment is an external link, it returns the full attachment entity.
        If the type of the attachment is a file, it creates the attachment entity in a `IN_PROGRESS` mode, and returns a MinIO PSU.
        When the file will be uploaded by the user, MinIO will notify the service via a Kafka topic and the service will set the status to `COMPLETED`.
      requestBody:
        $ref: "#/components/requestBodies/createAttachment"
      responses:
        "201":
          $ref: "#/components/responses/createdAttachment"
  /attachments/{id}:
    get:
      tags:
        - Attachments
      summary: Get an attachment by its id
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          $ref: "#/components/responses/attachmentResponse"
        "404":
          $ref: "#/components/responses/notFoundError"
    patch:
      tags:
        - Attachments
      summary: Update an attachment by its id. If the attachment is an internal file and the file should be updated too, the `extension` field must be set.
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        $ref: "#/components/requestBodies/createAttachment"
      responses:
        "200":
          $ref: "#/components/responses/createdAttachment"
    delete:
      tags:
        - Attachments
      summary: Delete an attachment by its id
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "204":
          description: The attachment was deleted successfully
